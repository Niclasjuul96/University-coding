/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1
CHIP ALU {
	IN
		x[16], y[16], // 16-bit inputs
		zx,           // zero the x input?
		nx,           // negate the x input?
		zy,           // zero the y input?
		ny,           // negate the y input?
		f,            // compute out = x + y (if 1) or x & y (if 0)
		no;           // negate the out output?

	OUT
		out[16], // 16-bit output
		zr,      // 1 if (out == 0), 0 otherwise
		ng;      // 1 if (out < 0),  0 otherwise

	PARTS:
	// Put you code here:
	Mux16(a=x, b[0..15]=false, sel=zx, out=czx); //Zero x, if zx=1
	Not16(in=czx, out=notx); // !x
	Mux16(a=czx, b=notx, sel=nx, out=cnx); //notx if nx=1
	
	//Do same for Y.
	
	Mux16(a=y, b[0..15]=false, sel=zy, out=czy); //Zero y, if zy=1
	Not16(in=czy, out=noty); //!y
	Mux16(a=czy, b=noty, sel=ny, out=cny); //noty if ny=1
	
	Add16(a=cnx, b=cny, out=xplusy); //add x + y
	And16(a=cnx, b=cny, out=xandy); // x and y
	Mux16(a=xandy, b=xplusy, sel=f, out=xpay); //chose add or and, based on f.
	
	Not16(in=xpay, out=nxpay); // not the xpay
	
	Mux16(a=xpay, b=nxpay, sel=no, out[0..7]=o1, out[8..15] = o2, out=oo); 		 
	 //choose if out should be org or not.
	
	Or8Way(in=o1, out=low);
	Or8Way(in=o2, out=up);
	Or(a=low, b=up, out=o);
	
	Not(in=o, out=zr);		
	
	And16(a[0..15]=true,b=oo, out[15]=ng, out[0..14]=drop); //ng
	
	Or16(a=oo,b[0..15]=false,out=out); //oo=output
}